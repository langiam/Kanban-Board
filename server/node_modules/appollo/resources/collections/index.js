import { createCollection } from "./createCollection.js";
import { deleteCollection } from "./deleteCollection.js";
import { getCollection } from "./getCollection.js";
import { getCollections } from "./getCollections.js";
import { removeProductsFromCollection } from "./removeProductsFromCollection.js";
import { updateCollection } from "./updateCollection.js";
import { addProductsToCollection } from "./addProductsToCollection"

class Collection {
    constructor() {

    }

    async createCollection(merchantId, payload) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const collection = await createCollection({ merchantId, payload, token })
        return collection
    }

    async getCollection(merchantId, collectionId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const collection = await getCollection({ collectionId, merchantId, token })
        return collection
    }

    async updateCollection(merchantId, collectionId, payload) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const collection = await updateCollection({ merchantId, collectionId, payload, token })
        return collection
    }

    async getCollections(merchantId, limit, page) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const collection = await getCollections({ merchantId, limit, page, token })
        return collection
    }

    async deleteCollection(merchantId, collectionId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token
        const collection_id = await deleteCollection({ merchantId, collectionId, token })
        return collection_id
    }

    async removeProductsFromCollection(merchantId, payload, collectionId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const collection = await removeProductsFromCollection({ merchantId, collectionId, payload, token })
        return collection
    }

    async addProductsToCollection(merchantId, payload, collectionId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const collection = await addProductsToCollection({ merchantId, collectionId, payload, token })
        return collection
    }
}

export default Collection