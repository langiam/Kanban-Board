import { createVariant } from "./createVariant.js"
import { deleteVariant } from "./deleteVariant.js"
import { getVariant } from "./getVariant.js"
import { getVariants } from "./getVariants.js"
import { updateVariant } from "./updateVariant.js"

class Variants {
    constructor() {

    }

    async getVariants(merchantId, productId, limit, page) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const variants = await getVariants({ merchantId, productId, token, page, limit })
        return variants
    }

    async getVariant(merchantId, productId, variantId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const variant = await getVariant({ merchantId, productId, variantId, token })
        return variant
    }

    async createVariant(merchantId, payload, productId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const variant = await createVariant({ merchantId, payload, productId, token })
        return variant
    }

    async updateVariant(merchantId, payload, productId, variantId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const variant = await updateVariant({ merchantId, payload, productId, variantId, token })
        return variant
    }

    async deleteVariant(merchantId, productId, variantId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const variant_Id = await deleteVariant({ merchantId, productId, variantId, token })
        return variant_Id
    }
}

export default Variants