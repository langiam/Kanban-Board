import { createOrder } from "./createOrder.js";
import { deleteOrder } from "./deleteOrder.js";
import { getOrder } from "./getOrder.js";
import { getOrders } from "./getOrders.js";
import { updateOrder } from "./updateOrder.js";

class Orders {
    constructor() {
    }

    async getOrders(merchantId, limit, page) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const orders = await getOrders({ merchantId, token, limit, page })
        return orders
    }

    async getOrder(merchantId, orderId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const order = await getOrder({ merchantId, orderId, token })
        return order
    }

    async createOrder(merchantId, payload) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const order = await createOrder({ merchantId, payload, token })
        return order
    }

    async updateOrder(merchantId, payload, orderId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const order = await updateOrder({ merchantId, payload, orderId, token })
        return order
    }

    async deleteOrder(merchantId, orderId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const order_id = await deleteOrder({ merchantId, orderId, token })
        return order_id
    }
}

export default Orders