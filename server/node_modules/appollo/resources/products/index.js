import { createProduct } from "./createProduct.js"
import { deleteProduct } from "./deleteProduct.js"
import { getProduct } from "./getProduct.js"
import { getProducts } from "./getProducts.js"
import { updateProduct } from "./updateProduct.js"

class Product {
    constructor() {
    }

    async getProducts(merchantId, limit, page) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const products = await getProducts({ merchantId, limit, page, token })
        return products
    }

    async getProduct(merchantId, productId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const product = await getProduct({ merchantId, productId, token })
        return product
    }

    async createProduct(merchantId, payload) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const product = await createProduct({ merchantId, payload, token })
        return product
    }

    async updateProduct(merchantId, payload, productId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const product = await updateProduct({ merchantId, payload, productId, token })
        return product
    }

    async deleteProduct(merchantId, productId) {
        if (!this.checkTokenExpiry()) {
            await this.getAccessToken()
        }
        const token = this.token.access_token

        const product_id = await deleteProduct({ merchantId, productId, token })
        return product_id
    }
}


export default Product